'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _css = require('css');

var _css2 = _interopRequireDefault(_css);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PX_REG = /\b(\d+(\.\d+)?)px\b/;
var RPX_REG = /\b(\d+(\.\d+)?)rpx\b/;
// const PX_GLOBAL_REG = new RegExp(PX_REG.source, 'g')
var RPX_GLOBAL_REG = new RegExp(RPX_REG.source, 'g');

var Adaptive = function () {
  function Adaptive(options, result) {
    _classCallCheck(this, Adaptive);

    var defaultConfig = {
      baseDpr: 2, // Dpr (default: 2)
      remUnit: 75, // 设计稿 750px
      remPrecision: 6 // rem计算精确度
    };
    this.result = result;
    this.config = _extends({}, defaultConfig, options);
  }
  // CSS 转换


  _createClass(Adaptive, [{
    key: 'parse',
    value: function parse(code) {
      var astObj = _css2.default.parse(code);
      this._processRules(astObj.stylesheet.rules);
      return _css2.default.stringify(astObj);
    }
    // 寻找所有的rules

  }, {
    key: '_processRules',
    value: function _processRules(rules) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        var ruleType = rule.type;
        if (ruleType === 'media' || ruleType === 'supports') {
          this._processRules(rule.rules); // recursive invocation while dealing with media queries
          continue;
        } else if (ruleType === 'keyframes') {
          this._processRules(rule.keyframes, true); // recursive invocation while dealing with keyframes
          continue;
        } else if (ruleType !== 'rule' && ruleType !== 'keyframe') {
          continue;
        }
        var declarations = rule.declarations;
        for (var j = 0; j < declarations.length; j++) {
          var declaration = declarations[j];
          // PX 单位的 不转换  ／ rpx 单位的转换
          if (declaration.type === 'declaration' && RPX_REG.test(declaration.value)) {
            var mode = 'rem';
            declaration.value = this._getCalcValue(mode, declaration.value);
          } else if (declaration.type === 'declaration' && PX_REG.test(declaration.value)) {
            var _mode = 'px';
            declaration.value = this._getCalcValue(_mode, declaration.value);
          }
        }
      }
    }
  }, {
    key: '_getCalcValue',
    value: function _getCalcValue(type, value) {
      var isHairline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _config = this.config,
          baseDpr = _config.baseDpr,
          remUnit = _config.remUnit,
          remPrecision = _config.remPrecision;

      function getValue(val) {
        var curType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : type;

        val = parseFloat(val.toFixed(remPrecision));
        return val === 0 ? val : val + curType;
      }
      return value.replace(RPX_GLOBAL_REG, function ($0, $1) {
        $1 = Number($1);
        return $1 === 0 ? 0 : type === 'rem' && $1 / baseDpr > 0.5 ? getValue($1 / remUnit) : !isHairline && $1 / baseDpr < 1 ? getValue($1, 'px') : getValue($1 / baseDpr > 0.5 ? $1 / baseDpr : 0.5, 'px');
      });
    }
  }]);

  return Adaptive;
}();

exports.default = Adaptive;